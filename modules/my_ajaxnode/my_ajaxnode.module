<?php
// $Id: my_ajaxnode.module
/**
* Implementation of hook_menu().
*
* This lets you make changes to any form in the site. You can alter, remove
* or add form elements. You can also alter the validation and submission
* behavior. The name will always be modulename_form_alter.
*/



function my_ajaxnode_init() {
 drupal_add_library('system', 'drupal.ajax');
}



function my_ajaxnode_preprocess_page(&$vars) { 
  if($vars['is_front'] == TRUE) {
    $vars['page']['content']['ajax_menu_panels'] = array(
      '#markup' => __menu_as_panels('main-menu'),
      '#weight' => 25,
      );
  }
   if ($vars['node'] && $vars['node']->nid == 24) { // Projects
    //load and output the view by name 
    //$vars['content']['views'] = views_embed_view('projects','block');  
  }  
  dpm($vars);
}


/**
 * Custom function to generate ajax-delivered content structure 
 * based on the main menu structure
 */
function __menu_as_panels($menu = 'main-menu') {
 $branch = menu_tree_all_data($menu,NULL,1);
 if (!empty($branch)) {
   $out = '<div id="panelContainer">';
   foreach($branch as $item){     
     //print "<pre>" . print_r($node, TRUE) . "</pre>";
     //print "<pre>" . print_r($branch, TRUE) . "</pre>";  
     $node =  $item['link']['link_path'] !== '<front>' ? menu_get_object('node', 1, $item['link']['link_path']) : node_load(98);     
     $panel_display_name = !empty($node->field_panel_name) ? $node->field_panel_name['und'][0]['safe_value'] : 'Panel Name';
     $current_path = drupal_lookup_path('alias',"node/". $node->nid);     
 
     $out .= '<div id="mcs_container_' . $node->nid . '" class="panel">'; 		
     $out .= '  <div class="container">';
     $out .= '    <div class="content-static">'; 
     $out .=  __assemble_panel_content($node);
     $out .= '    </div>';
     $out .= '    <div class="content-dynamic"></div>';
 	   $out .= '  </div>';   
     $out .= '  <a class="panelControl ajax" href="/' . $current_path . '" title="' . $panel_display_name . '"><div><span>' . $panel_display_name . '</span></div></a>';
     $out .= '</div>'; 
 }
 $out .= '<div class="loading-icon icon">L</div>';
 $out .= '</div>';
 return $out;
 }
}



/**
 * Custom function to render nodes and node-related content for out custom layout
 */
function __assemble_panel_content($node) {
  //dpm($node);  
  $classes[] = !empty($node->field_horiz_align) ? 'node-align-' . $node->field_horiz_align[LANGUAGE_NONE][0]['value'] : 'node-align-center';
  $classes[] = !empty($node->field_teaser_img) ? 'has-field-teaser-img' : NULL;  
  $classes[] = !empty($node->field_image) ? 'has-field-image' : NULL;   
  $classes[] = !empty($node->field_display_img) ? 'has-field-display-img' : NULL;
  $classes[] = !empty($node->field_scene) ? 'has-field-scene' : NULL;
  $out = '<div class="panel-content ' . implode(" ", $classes) . '">';
  $out .= drupal_render(node_view($node));
 
  // One-off for Projects
  if($node->nid == 24) { 
    $out .= '<div class="node-section-views">';
    //load and output the view by name 
    $out .= views_embed_view('projects','block'); 
    $out .= '</div>';   
  } else {
    $out .=  __get_node_menu_children($node->nid, $menu = 'main-menu'); 
  }

  $out .=  __get_node_menu_siblings($node->nid, $menu = 'main-menu');
  $out .= '</div>';
  return $out;
}



/**
 * Implemenets hook_menu(); 
 */
function my_ajaxnode_menu() {
  $items['ajax/%foo_tail'] = array(
    'title' => 'AJAX Node Loader',
    'load arguments' => array('%map', '%index'),
    'page callback' => 'ajax_node_load',
    'page arguments' => array(1),
    'access' => TRUE,
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );
  $items['api-ajax-scene'] = array(
    'title' => 'AJAX Scene API',
    'load arguments' => array('%map', '%index'),
    'page callback' => 'ajax_scene_load',
    //'page arguments' => array(1),
    'access' => TRUE,
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  ); 
  return $items;
}

function foo_tail_to_arg($arg, $map, $index) {
  return implode('/', array_slice($map, $index));
}

function foo_tail_load($arg, $map, $index) {
  return implode('/', array_slice($map, $index));
}


/*
 * Load node via AJAX
 */
function ajax_node_load($arg) {  
  sleep(0);
  // Load in Drupal core AJAX library. 
  if($arg == '') {  
       $result = array(
          '#type' => 'ajax',
          '#commands' => array(
            //array('command' => 'loadScene', 'data' => $node->nid),          
            ajax_command_html('#panelContainer', '<p>It\'s the front page</p>'),
          ),
        );
        return $result;    
  
  }  
  
  global $my_alias, $my_system_path, $my_page_count;
  $my_system_path = drupal_lookup_path("source", $arg);
  $my_alias = $arg;
  
  // Get the corresponding node for the path
  $node = menu_get_object("node", 1, $my_system_path);
  
  // Generate some output for our AJAX responses 
  $content = __assemble_panel_content($node);	
	
	$scene_id = !empty($node->field_scene) ? $node->field_scene[LANGUAGE_NONE][0]['nid'] : '';

  $commands = array();
  $commands[] = ajax_command_invoke('#panelContainer .active .content-dynamic', 'html', array($content));
  $commands[] = array('command' => 'kcl_display_content', 'nodeId' => $node->nid); 
  $commands[] = ajax_command_invoke('#panelContainer','removeClass', array('loading'));
  $commands[] = array('command' => 'load_node_scene', 'sceneId' => $scene_id);
  return array('#type' => 'ajax', '#commands' => $commands);	
}


/*
 * Load the scene referenced by a node
 */
function ajax_scene_load($arg = 'front') { 
  //sleep(3);
  // Get the corresponding node for the path ($arg) 
  if($arg == 'front') {
    watchdog('debug','Using default arg value of: ' . $arg);
    //$node = node_load(variable_get('site_frontpage', 'node'));
    $node = node_load(98);
  } else {   
    watchdog('debug','Detected arg value is: ' . $arg);
    $my_system_path = drupal_lookup_path("source", $arg);
    $node = menu_get_object("node", 1, $my_system_path);  
 }
  
  // Get the scene id for the node if exists	
	$scene_id = !empty($node->field_scene) ? $node->field_scene[LANGUAGE_NONE][0]['nid'] : '';

	// Return command array
  $commands = array();
  $commands[] = array('command' => 'load_node_scene', 'sceneId' => $scene_id);
  return array('#type' => 'ajax', '#commands' => $commands);	
}


$my_alias = '';
$my_system_path = '';
$parent_candidates = '';
$my_print_path = '';
$my_page_count = '';




function my_ajaxnode_preprocess_node(&$variables){

  global $my_alias, $my_system_path, $my_print_path, $parent_candidates, $my_page_count;

  $my_print_path = $my_system_path;
  $parent_candidates = _get_parent_candidates(drupal_get_path_alias($my_system_path));

  $matched_menus = array();
  $matched_link_titles = array();
  $results = db_select('menu_links','ml')
    ->fields('ml',array('menu_name','link_path','link_title','depth'))
    ->condition('link_path',$parent_candidates,'IN')
    ->execute();

  foreach ($results as $record) { 
    // If there is more than one matched link in a menu, use the deepest
    if (!isset($matched_menus[$record->menu_name]) or $record->depth > $matched_menus[$record->menu_name]['depth']) {
      $matched_menus[$record->menu_name]['link_path'] = $record->link_path;
      $matched_menus[$record->menu_name]['depth'] = $record->depth;
    }

    // Get the Link Title if it can be found in a menu item
    if ($record->link_title AND !isset($matched_link_titles[$record->link_path])) {
      $matched_link_titles[$record->link_path] = $record->link_title;
    }
  }

  // First breadcrumbs is always Home
  $breadcrumbs[] = l(t('Home'),'#');
  //$breadcrumbs[] = l(t(global $my_alias),'<front>');
  // Remove current page from breadcrumb
  //array_pop($parent_candidates);

  foreach($parent_candidates as $link_path) {
    // If title of the page is found on a menu item, use it
    if (isset($matched_link_titles[$link_path])) {
      $breadcrumbs[] = l($matched_link_titles[$link_path],$link_path,array('attributes' => array('class' => array('ajax'))));
    } 
  }
  
 drupal_set_breadcrumb($breadcrumbs); 
 
}




function _get_parent_candidates($path = NULL) {
  $pieces = explode('/', $path);
  $path = '';
  $parent_candidates = array();
  foreach ($pieces as $piece) {
    $path .= $piece . '/';
    $parent_candidates[] = drupal_get_normal_path(rtrim($path, '/'));
  }
  return $parent_candidates;
}



/*
 * Custom function to display immediate menu children of current node 
 */
function __get_node_menu_children($nid, $menu = 'main-menu') {

  $path = 'node/'. $nid;
  $parent = menu_link_get_preferred($path);
  $mlid = $parent['mlid'];
  $tree = menu_tree_all_data($menu);

  //print_r(array_keys($tree['49956 Web Development 579']['link']['mlid'])); return;

  $subtree = __get_menu_subtree($tree,$mlid);
  $num_keys = array_values($subtree);
  $children = $num_keys[0]['below'];
  //print_r($parent);
  if($children) {
    $out = '<div class="node-section-menu-children">';
    $count = 0;
    foreach($children as $child){  
      $child_id = str_ireplace("node/",'',$child['link']['link_path']);
      $child_node = node_load($child_id);
      $child_node->attributes_array['class'][] = 'poop';
      $child_view = node_view($child_node, $view_mode = 'scrape');
      $row = ($count % 2 == 0) ? 'even' : 'odd';    
      $out .= '<div class="row ' . $row . '">';
      $out .= render($child_view);
      $out .= '</div>';
      $count++;     
    }
    $out .= '</div>';
    return $out;
  }
}



/*
 * Custom function to display menu siblings of current node 
 */
function __get_node_menu_siblings($nid, $menu = 'main-menu') {
  // System path
	$path = 'node/'. $nid;
	// Get alias for system path, if exists
	$menu_link = menu_link_get_preferred($path);
	$mlid = $menu_link['mlid'];
	$tree = menu_tree_all_data($menu);
	$branch = __get_menu_subtree($tree,$mlid);	
	$num_keys = array_values($branch);	
	$out = '<div class="menu-custom-siblings-menu">';
	$count = -1;
	foreach($num_keys as $num_key) {
		$classes = array();
		$classes[] = 'ajax';
		$count++;	
		if($num_keys[$count]['link']['mlid'] == $mlid) {
			$active = $count;
			$classes[] = 'active';	
			//print "<pre>" . print_r($num_keys[$count], TRUE) . "</pre>";
			//print "<pre>" . print_r($num_keys[$count]['link']['plid'], TRUE) . "</pre>";
			//kcl5_get_menu_item_parents($tree,$num_keys[$count]['link']['plid']);
		}
		$out .= '<a class="' . implode($classes, ' ') . '" href="/' . drupal_get_path_alias($num_keys[$count]['link']['href']) . '" title="' . $num_keys[$count]['link']['title'] . '"><span>' . $num_keys[$count]['link']['title'] . '</span></a>';					
	}	
	$out .= '</div>';
	$prev = $num_keys[$active - 1]; 	
	$next = $num_keys[$active + 1]; 	
	if (!empty($prev)) { $out .= '<a class="prev-link ajax icon" href="/' . drupal_get_path_alias($prev['link']['href']) . '">l</a>'; }
	if (!empty($next)) { $out .= '<a class="next-link ajax icon" href="/' . drupal_get_path_alias($next['link']['href']) . '">r</a>'; }
	return $out;
}	



/**
 * Extract a specific subtree from a menu tree based on a menu link id (mlid)
 *
 * @param array $tree
 *   A menu tree data structure as returned by menu_tree_all_data() or menu_tree_page_data()
 * @param int $mlid
 *   The menu link id of the menu entry for which to return the subtree
 * @return array
 *   The found subtree, or NULL if no entry matched the mlid
 */
function __get_menu_subtree($tree, $mlid) {
  // Check all top level entries
  foreach ($tree as $key => $element) {
    // Is this the entry we are looking for?
    if ($mlid == $element['link']['mlid'])  {
      // Yes, return while keeping the key
      return array($key => $element);
    }
    else {
      // No, recurse to children, if any
      if ($element['below']) {
        $submatch = __get_menu_subtree($element['below'], $mlid);
        // Found wanted entry within the children?
        if ($submatch) {
          // Yes, return it and stop looking any further
          return $submatch;
        }
      }
    }
  }
  // No match at all
  return NULL;
}



/**
 * Instance of hook_forms
 * Define registration and video access forms
 */
function my_ajaxnode_forms($form_id, $args) {
  $forms = array();  
  if ($form_id == 'kclstudios_custom_contact_form') {
    $forms[$form_id] = array('callback' => '__kclstudios_custom_contact_form');
  }
  return $forms;
}



/**
 * Instance of hook_form
 * Custom contact form
 */
function __kclstudios_custom_contact_form($form, &$form_state) {
  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
 $form['email'] = array(
    '#title' => t('E-mail'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );  
  $form['company'] = array(
    '#title' => t('Company'),
    '#type' => 'textfield',
   );
  $form['phone_number'] = array(
    '#title' => t('Phone Number'),
    '#type' => 'textfield',
  );
  $form['message'] = array(
    '#title' => t('Message'),
    '#type' => 'textarea',
  ); 
  $form['method_of_contact'] = array(
    '#title' => t('How would you liked to be contacted?'),
    '#type' => 'radios',
    '#options' => array(
      'email' => 'Email',
      'phone' => 'Phone',      
      )
  ); 
  $form['my_captcha_element'] = array(
      '#type' => 'captcha',
      '#captcha_type' => 'image_captcha/Image',
      '#required' => TRUE,
      );       
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#ajax' => array(
      'callback' => '__custom_contact_form_submit',
      'wrapper' => 'kclstudios-custom-contact-form--2',
      'method' => 'replace',
      'effect' => 'fade',
      ),
    );         
  //dpm($form);
  return $form;
}
  



/**
 * Blocks
 */
function my_ajaxnode_block_info() {
  $blocks['kclstudios_custom_contact_form'] = array(
  	'info' => t('KCL Studios Contact'), 
  	'cache' => DRUPAL_NO_CACHE,
  	);  
	return $blocks;		
}



/**
 * Block Content
 */
function my_ajaxnode_block_view($delta = '') {
	$block = array();
	switch($delta) {	
    case 'kclstudios_custom_contact_form': 
      $block['subject'] = NULL;
      $block['content'] = drupal_get_form('kclstudios_custom_contact_form');
      break;  
  }
	return $block;
}



/**
 * Ajax callback for form
 */
function __custom_contact_form_submit($form, &$form_state) {  
  //dpm($form_state);
 
  // Perform some validation for our required elements
  if( $form_state['values']['name'] == '' || $form_state['values']['email'] == '') {    
    if($form_state['values']['name'] == '') {
      $message = '<p>Please provide a contact name.</p>';
      form_set_error("name", t($message));     
    }  
    if($form_state['values']['email'] == '') {
      $message = '<p>Please provide an email address.</p>';
      form_set_error("email", t($message));     
    } 
    return($form); 
  } else {    
    // Invoke our Rules event
    rules_invoke_event('custom_contact_form_submitted', $form_state['values']['name'], $form_state['values']['email'], $form_state['values']['company'], $form_state['values']['phone_number'], $form_state['values']['message'], $form_state['values']['method_of_contact']); 
   //rules_invoke_event('custom_contact_form_submitted', $form_state['values']['name']);
     // rebuild the form after submitted successfully
     $form_state['rebuild'] = TRUE;
     // try this if you want to reset the form item values
     //$form_state['input'] = array();
   
    watchdog('debug', $form_state['values']['name']);
   // Initiate a webform submission for each event        
    $msg = '';
    $msg .= 'Message sent. Thank you for your interest in KCL Studios.';   
    // Treat them in Drupal way to load the form in AJAX, so that all the necessary scripts will be loaded.  
    //dpm($form);
    drupal_set_message($msg);
    return($form);     
  }
}



/**
 * Implementation of hook_rules_event_info().
 * @ingroup rules
 */
function my_ajaxnode_rules_event_info() {
  return array(
    'custom_contact_form_submitted' => array(
      'label' => t('User submits the KCL Studios custom contact form'),
      'module' => 'my_ajaxnode',
      'variables' => array(
        'name' => array('type' => 'text', 'label' => t('Name')),
        'email' => array('type' => 'text', 'label' => t('Email')),
        'company' => array('type' => 'text', 'label' => t('Company')),
        'phone_number' => array('type' => 'text', 'label' => t('Phone Number')),
        'message' => array('type' => 'text', 'label' => t('Message')),
        'method_of_contact' => array('type' => 'text', 'label' => t('Method of Contact')),
      ),
    ),
  );
}


