<?php
// $Id: my_ajaxnode.module
/**
* Implementation of hook_menu().
*
* This lets you make changes to any form in the site. You can alter, remove
* or add form elements. You can also alter the validation and submission
* behavior. The name will always be modulename_form_alter.
*/





function my_ajaxnode_init() {
 drupal_add_library('system', 'drupal.ajax');
}


function my_ajaxnode_menu() {
  $items['ajax/%foo_tail'] = array(
    'title' => 'AJAX Node Loader',
    'load arguments' => array('%map', '%index'),
    'page callback' => 'ajax_node_load',
    'page arguments' => array(1),
    'access' => TRUE,
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );
  $items['api-ajax-scene'] = array(
    'title' => 'AJAX Scene API',
    'load arguments' => array('%map', '%index'),
    'page callback' => 'ajax_scene_load',
    //'page arguments' => array(1),
    'access' => TRUE,
    'access arguments' => array('access content'),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  ); 
  return $items;
}

function foo_tail_to_arg($arg, $map, $index) {
  return implode('/', array_slice($map, $index));
}

function foo_tail_load($arg, $map, $index) {
  return implode('/', array_slice($map, $index));
}


/*
 * Load node via AJAX
 */
function ajax_node_load($arg) {  
  sleep(0);
  // Load in Drupal core AJAX library. 
  if($arg == '') {  
       $result = array(
          '#type' => 'ajax',
          '#commands' => array(
            //array('command' => 'loadScene', 'data' => $node->nid),          
            ajax_command_html('#panelContainer', '<p>It\'s the front page</p>'),
          ),
        );
        return $result;    
  
  }  
  
  global $my_alias, $my_system_path, $my_page_count;
  $my_system_path = drupal_lookup_path("source", $arg);
  $my_alias = $arg;
  
  // Get the corresponding node for the path
  $node = menu_get_object("node", 1, $my_system_path);
  
  // 
  $output =  node_view($node, $view_mode='full');	
	$content = drupal_render($output);
	$scene_id = !empty($node->field_scene) ? $node->field_scene[LANGUAGE_NONE][0]['nid'] : '';

  $commands = array();
  $commands[] = ajax_command_invoke('#panelContainer .active .content-dynamic', 'html', array($content));
  $commands[] = array('command' => 'kcl_display_content', 'nodeId' => $node->nid); 
  $commands[] = ajax_command_invoke('#panelContainer','removeClass', array('loading'));
  $commands[] = array('command' => 'load_node_scene', 'sceneId' => $scene_id);
  return array('#type' => 'ajax', '#commands' => $commands);	
}


/*
 * Load the scene referenced by a node
 */
function ajax_scene_load($arg = 'front') { 
  //sleep(3);
  // Get the corresponding node for the path ($arg) 
  if($arg == 'front') {
    watchdog('debug','Using default arg value of: ' . $arg);
    //$node = node_load(variable_get('site_frontpage', 'node'));
    $node = node_load(98);
  } else {   
    watchdog('debug','Detected arg value is: ' . $arg);
    $my_system_path = drupal_lookup_path("source", $arg);
    $node = menu_get_object("node", 1, $my_system_path);  
 }
  
  // Get the scene id for the node if exists	
	$scene_id = !empty($node->field_scene) ? $node->field_scene[LANGUAGE_NONE][0]['nid'] : '';

	// Return command array
  $commands = array();
  $commands[] = array('command' => 'load_node_scene', 'sceneId' => $scene_id);
  return array('#type' => 'ajax', '#commands' => $commands);	
}


$my_alias = '';
$my_system_path = '';
$parent_candidates = '';
$my_print_path = '';
$my_page_count = '';




function my_ajaxnode_preprocess_node(&$variables){

  global $my_alias, $my_system_path, $my_print_path, $parent_candidates, $my_page_count;

  $my_print_path = $my_system_path;
  $parent_candidates = _get_parent_candidates(drupal_get_path_alias($my_system_path));

  $matched_menus = array();
  $matched_link_titles = array();
  $results = db_select('menu_links','ml')
    ->fields('ml',array('menu_name','link_path','link_title','depth'))
    ->condition('link_path',$parent_candidates,'IN')
    ->execute();

  foreach ($results as $record) { 
    // If there is more than one matched link in a menu, use the deepest
    if (!isset($matched_menus[$record->menu_name]) or $record->depth > $matched_menus[$record->menu_name]['depth']) {
      $matched_menus[$record->menu_name]['link_path'] = $record->link_path;
      $matched_menus[$record->menu_name]['depth'] = $record->depth;
    }

    // Get the Link Title if it can be found in a menu item
    if ($record->link_title AND !isset($matched_link_titles[$record->link_path])) {
      $matched_link_titles[$record->link_path] = $record->link_title;
    }
  }

  // First breadcrumbs is always Home
  $breadcrumbs[] = l(t('Home'),'#');
  //$breadcrumbs[] = l(t(global $my_alias),'<front>');
  // Remove current page from breadcrumb
  //array_pop($parent_candidates);

  foreach($parent_candidates as $link_path) {
    // If title of the page is found on a menu item, use it
    if (isset($matched_link_titles[$link_path])) {
      $breadcrumbs[] = l($matched_link_titles[$link_path],$link_path,array('attributes' => array('class' => array('ajax'))));
    } 
  }
  
 drupal_set_breadcrumb($breadcrumbs); 
 
}




function _get_parent_candidates($path = NULL) {
  $pieces = explode('/', $path);
  $path = '';
  $parent_candidates = array();
  foreach ($pieces as $piece) {
    $path .= $piece . '/';
    $parent_candidates[] = drupal_get_normal_path(rtrim($path, '/'));
  }
  return $parent_candidates;
}



/**
 * Instance of hook_forms
 * Define registration and video access forms
 */
function my_ajaxnode_forms($form_id, $args) {
  $forms = array();  
  if ($form_id == 'kclstudios_custom_contact_form') {
    $forms[$form_id] = array('callback' => '__kclstudios_custom_contact_form');
  }
  return $forms;
}



/**
 * Instance of hook_form
 * Custom contact form
 */
function __kclstudios_custom_contact_form($form, &$form_state) {
  $form['first_name'] = array(
    '#title' => t('First Name'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['last_name'] = array(
    '#title' => t('Last Name'),    
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['member_of_gmdc'] = array(
    '#title' => t('Member of GMDC'),
    '#type' => 'radios',
    '#options' => array(
      'Yes' => 'Yes',
      'No' => 'No',      
      )
  );    
  $form['job_title'] = array(
    '#title' => t('Job Title'),    
    '#type' => 'textfield',
  );
  $form['company'] = array(
    '#title' => t('Company'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['email'] = array(
    '#title' => t('E-mail'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['phone_number'] = array(
    '#title' => t('Phone Number'),
    '#type' => 'textfield',
  );
  /*
  $form['my_captcha_element'] = array(
      '#type' => 'captcha',
      '#captcha_type' => 'image_captcha/Image',
      '#required' => TRUE,
      ); 
   */   
  $form['gmdc_connect_register_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Register'),
    '#ajax' => array(
      'callback' => '__kclstudios_custom_contact_form_submit',
      'wrapper' => 'kclstudios-custom-contact-form',
      'method' => 'replace',
      'effect' => 'fade',
      ),
    );         
  //dpm($form);
  return $form;
}
  
/**
 * Blocks
 */
function my_ajaxnode_block_info() {
  $blocks['kclstudios_custom_contact_form'] = array(
  	'info' => t('KCL Studios Contact'), 
  	'cache' => DRUPAL_NO_CACHE,
  	);  
	return $blocks;		
}


/**
 * Block Content
 */
function my_ajaxnode_block_view($delta = '') {
	$block = array();
	switch($delta) {	
    case 'kclstudios_custom_contact_form': 
      $block['subject'] = NULL;
      $block['content'] = drupal_get_form('kclstudios_custom_contact_form');
      break;  
  }
	return $block;
}

/**
 * Ajax callback for form
 */
function __kclstudios_custom_contact_form_submit($form, &$form_state) {  
  //dpm($form_state);
 
  // Perform some validation for our required elements
  if( $form_state['values']['first_name'] == '' || $form_state['values']['email'] == '') {    
    if($form_state['values']['first_name'] == '') {
      $message = '<p>Please provide a company name.</p>';
      form_set_error("company", t($message));     
    }  
    if($form_state['values']['email'] == '') {
      $message = '<p>Please provide an email address.</p>';
      form_set_error("email", t($message));     
    } 
    return($form); 
  } else {   
    drupal_set_message('Hey yo', 'status');
     // rebuild the form after submitted successfully
     //$form_state['rebuild'] = TRUE;
     // try this if you want to reset the form item values
     //$form_state['input'] = array();
    //$form_state['values']['first_name'] = 'Evalllllluator';
    //watchdog('debug', print_r(array_filter($form_state['values']['events']), 1));
    // Set our session variable
    rules_invoke_event('custom_contact_form_submitted', $form_state['first_name'], $form_state['last_name']); 
    // Initiate a webform submission for each event        
    $msg = '';
    $msg .= '<p class="gmdc-connect-reg-confirm">Thank you for registering. An email confirmation has been sent to your registration address (<strong>' . $form_state['values']['email'] .'</strong>).</p>';   
    // Treat them in Drupal way to load the form in AJAX, so that all the necessary scripts will be loaded.
    
    unset($form['first_name']['#value']);

  // Clear form and form state cache
  $form_state = form_state_defaults();
  $form_build_id = $_POST['form_build_id'];
  form_set_cache($form_build_id, $form, $form_state);
 //   $new_form = drupal_rebuild_form('kclstudios_custom_contact_form',$form_state,$form);
    
    $commands[] = ajax_command_html('readOut', '<p>Success</p>'); 
    $result =  array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
    //dpm($form);
    return($result);     
  }
}


/**
 *
 */
function __do_the_thing(){
  $form = drupal_get_form('kclstudios_custom_contact_form');
 	$output = drupal_render($form);
  // Generate the settings:
  $settings = FALSE;
  $javascript = drupal_add_js(NULL, NULL);
  if(isset($javascript['settings'], $javascript['settings']['data']))
  {
    $settings = '<script type="text/javascript">jQuery.extend(Drupal.settings, ';
    $settings .= drupal_json_encode(call_user_func_array('array_merge_recursive', $javascript['settings']['data']));
    $settings .=  ');</script>';
  }
  // Return the rendered form and the settings
  die($output . $settings);
}

/**
 * Implementation of hook_rules_event_info().
 * @ingroup rules
 */
function my_ajaxnode_rules_event_info() {
  return array(
    'custom_contact_form_submitted' => array(
      'label' => t('User submits the KCL Studios custom contact form'),
      'module' => 'my_ajaxnode',
      'arguments' => array(
        'first_name' => array('type' => 'user', 'label' => t('First Name')),
        'last_name' => array('type' => 'user', 'label' => t('Last Name')),
      ),
    ),
  );
}


